apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: basic-ingress
  annotations:
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /auth-service
        backend:
          serviceName: auth-service
          servicePort: 8099
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-http-backend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ingress-nginx
  namespace: default
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ingress-nginx
    spec:
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.9.0-beta.19
          args:
            - /nginx-ingress-controller
            - --default-backend-service=default/default-http-backend
            - --configmap=default/nginx-configuration
            - --tcp-services-configmap=default/tcp-services
            - --udp-services-configmap=default/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    service: auth
spec:
  ports:
  - name: "grpc"
    protocol: TCP
    port: 8097
    targetPort: 8097
  - name: "http"
    protocol: TCP
    port: 8099
    targetPort: 8099
  selector:
    service: auth
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        service: auth
    spec:
      containers:
      - name: auth
        image: gold/auth-service:latest
        ports:
        - containerPort: 8097
        - containerPort: 8099
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db-service
  labels:
    service: postgres
spec:
  ports:
  - name: "http"
    protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    service: postgres
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  template:
	metadata:
  	labels:
   	service: postgres
	spec:
  	containers:
  	- name: postgres
    	image: postgres
    	ports:
    	- containerPort: 5432
    	env:
    	- name: POSTGRES_USER
      	value: postgres
    	- name: POSTGRES_PASSWORD
      	value: superpostgres
    	- name: PGDATA
      	value: /var/lib/postgresql/data/pgdata
    	volumeMounts:
       	- mountPath: /var/lib/postgresql/data
         	name: postgredb
  	volumes:
    	- name: postgredb
        emptyDir: {}